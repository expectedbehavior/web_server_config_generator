#!/usr/bin/env ruby

require 'fileutils'
require 'pp'
require 'find'
require 'digest/sha1'
require 'pathname'
require 'rubygems'
require 'highline/import'
require 'optparse'
require 'yaml'
$:.unshift(File.expand_path(File.dirname(__FILE__) + '/../lib'))
require 'web_server_config_generator'
require 'web_server_config_generator/pathname'
require 'web_server_config_generator/nginx_conf'
require 'web_server_config_generator/generator'
require 'web_server_config_generator/project_directory'
require 'web_server_config_generator/sub_uri_project'


$ENVS = []
$TEST_MODE = false
$CREATE_WEB_SERVER_FILES_DIR = false
$PRINT_HOSTS = false
$WEB_SERVER_FILES_DIR = nil
$ADD_HOSTS = nil
$RESTART_NGINX = nil

opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [project(s) dir] [options]"

  opts.separator ""
  opts.separator "This will generate web server configuration files for your projects."
  opts.separator ""
  opts.separator "If you supply a project directory we assume you have run this before and will just generate the files for that project.  If you specify your projects directory we will generate the files for all projects found.  Not supplying a directory is the same as supplying your current directory."
  opts.separator ""
  opts.separator "No flags = try to generate files for all envs"
  opts.separator ""
  opts.separator "Specific options:"

  # Mandatory argument.
  opts.on("-e", "--environment ENV",
          "specify a specific environment to generate (defaults to all in database.yml)") do |env|
    $ENVS << env
  end

  opts.on("-n", "--list-hosts", "list generated hostnames, useful for setting up the hosts file on your own") do
    $PRINT_HOSTS = true
  end

  opts.on("-c", "--create-web-server-files-dir",
          "create web_server_files directory (useful the first time you run this script)",
          "  in this case the supplied (or assumed) directory will be set as the",
          "  'projects' directory") do
    $CREATE_WEB_SERVER_FILES_DIR = true
  end

  opts.on("-p", "--projects-dir DIR", "specify the directory containing all your projects") do |dir|
    $PROJECTS_DIRECTORY = dir
  end

  opts.on("-l", "--web-server-files-dir-location DIR",
          "put all the web server configuration files in DIR instead of the default location") do |path|
    $WEB_SERVER_FILES_DIR = File.expand_path(path)
  end

  opts.on("-a", "--[no-]add-hosts", "add ghost entries for generated hostnames, requires ghost gem") do |b|
    $ADD_HOSTS = b
  end

  opts.on("-d", "--delete-hosts", "delete ghost entries added by this script, requires ghost gem") do |b|
    $DELETE_HOSTS = b
  end

  opts.on("-r", "--[no-]restart-nginx", "restart nginx at the end") do |b|
    $RESTART_NGINX = b
  end

  opts.on("-v", "--verbose", "verbose") do
    $VERBOSE = true
  end

#   opts.on("-t", "--test-mode", "test mode; do not modify the FS, just print messsages") do
#     $TEST_MODE = true
#   end

  opts.separator ""
  opts.separator "Common options:"

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

opts.parse!(ARGV)


project_or_projects_dir = ARGV.first && WebServerConfigGenerator::Pathname.new(File.expand_path(ARGV.first))

options = {}
options[:environments] = $ENVS if $ENVS.any?
options[:project_or_projects_dir] = project_or_projects_dir
web_server_setup = WebServerConfigGenerator::Generator.new(options)

web_server_setup.setup_webserver_links_dir

if $PRINT_HOSTS
  puts web_server_setup.server_names.join("\n")
  exit 0
end

begin
  require 'ghost'
  puts
  if $DELETE_HOSTS
    puts "Deleting ghost entries..."
    web_server_setup.delete_ghost_entries
    exit 0
  end
  if $ADD_HOSTS || ($ADD_HOSTS.nil? && agree("Setup ghost entries for projects? [Y/n]") { |q| q.default = "Y"})
    puts "Setting up ghost entries..."
    web_server_setup.add_ghost_entries
  end
rescue LoadError
  puts "Couldn't load ghost so I won't add hostname entries for you.  Install the 'ghost' gem, or run me with a -n to get a list of hostnames to setup youself."
end

web_server_setup.write_conf_files

pp web_server_setup.app_projects if $VERBOSE
pp web_server_setup.sub_uri_projects if $VERBOSE
pp web_server_setup.environments if $VERBOSE

web_server_setup.check_nginx_conf

web_server_setup.prompt_to_restart_nginx
